// basic button styles

%button {
  @include NeoLinkStyles;
  align-items: center;
  justify-content: center;
  border: 0;
  border-radius: $button-border-radius;
  // issue of cursor flickering
  // cursor: pointer;
  display: inline-flex;
  font-weight: $button-font-weight;
  // height: $button-height;
  // outline: 0;
  padding: $button-padding;

  width: auto;
  // min-width: $button-min-width;
  line-height: $button-line-height;
  letter-spacing: $button-letter-spacing;
  font-size: $button-font-size;
  color: $button-text-color;

  &:hover {
    transition: $button-transition;
    transition-property: background-color, color, box-shadow;
  }

  &:focus,
  &:focus-visible {
    outline-offset: 0px;
  }

  &:not(:empty)::before {
    margin-right: $token-button-icon-margin;
    margin-left: 0;
  }
  &[dir="rtl"]:not(:empty)::before,
  [dir="rtl"] &:not(:empty)::before {
    margin-left: $token-button-icon-margin;
    margin-right: 0;
  }
}

// wide button styles

.neo-btn {
  position: relative;

  &--wide {
    width: 100%;
    display: flex;
    justify-content: center;
  }
  &--compact {
    min-height: $compact-button-height;
    padding: $compact-button-padding;
    font-size: $compact-circle-button-font-size;
  }
  @extend %button;

  // add brackets on hover when not disabled
  &:not(:disabled) {
    // "normal" buttons hover state
    &:not([class*="neo-icon-"], [class*="neo-badge"]) {
      &:hover,
      &:focus {
        &::before,
        &::after {
          position: absolute;
          content: "";
          display: block;
          top: 2px;
          bottom: 2px;
          width: 16px;
          border-radius: 100%;
        }
        &::before {
          left: 2px;
          border-left: 2px solid;
        }
        &::after {
          right: 2px;
          border-right: 2px solid;
        }
      }
    }

    // icon buttons hover state
    &[class*="neo-icon-"] {
      &:hover,
      &:focus {
        // wide icon buttons are little odd, handle those edge cases
        &[class*="neo-btn--wide"]::before,
        &[class*="neo-btn--wide"]::after {
          min-height: calc($compact-button-height - 4px);
        }
        &:not([class*="neo-btn--wide"]) {
          padding: 1px 2px;
        }

        &::before,
        &::after {
          display: flex;
          height: -webkit-fill-available;
          align-items: center;
          border-radius: 100%;
        }

        &:not([dir="rtl"]) {
          &::before {
            padding-left: 12px;
            border-left: 2px solid;
          }
          &::after {
            content: "";

            // HACK: to make the hover/focus border curve be the same on both sides, we need to account for the space the icon takes in the padding, and then counter that unnecessary space by using a negative margin
            padding-right: 24px;
            margin-left: -12px;
            border-right: 2px solid;
          }
        }

        &[dir="rtl"] {
          &::before {
            padding-right: 12px;
            border-right: 2px solid;
          }
          &::after {
            content: "";

            // HACK: to make the hover/focus border curve be the same on both sides, we need to account for the space the icon takes in the padding, and then counter that unnecessary space by using a negative margin
            padding-left: 24px;
            margin-right: -12px;
            border-left: 2px solid;
          }
        }
      }
    }
  }
}

@mixin button-animations() {
}

.neo-btn-primary {
  @extend %button;
  @each $name, $value in $button-states {
    &--#{$name} {
      background-color: map-get($value, hover-color);
      color: $button-text-color;
      //
      background-image: linear-gradient(
        50deg,
        map-get($value, hover-color) 0%,
        map-get($value, hover-color) 50%,
        map-get($value, color) 50%,
        map-get($value, color) 100%
      );
      background-repeat: no-repeat;
      background-size: 300%;
      background-position: 100% 0%;
      transition: background-position
        $global-transition-duration
        $global-transition-timing;
      transition-delay: 0s, 0.15s;
      //
      @include pulse("button", $name, map-get($value, color-rgb));
    }
    &--#{$name}:hover,
    &--#{$name}:focus {
      //
      transition-delay: 0s, 0.15s;
      transition: background-position
        $global-transition-duration
        $global-transition-timing;
      cursor: pointer;
      background-position: 0% 100%;
      //
    }

    &--#{$name}:active {
      // transition: $global-hover-transition;
      background-color: map-get($value, pressed-color);
      // box-shadow: $button-box-shadow;
      background-image: none;
      // background-size: 0%;
    }

    &--#{$name}:focus {
      // outline: $global-outline-color auto 2px;
    }

    &--#{$name}[disabled],
    &--#{$name}--disabled {
      background-color: map-get($value, disabled-color);
      background-image: none;
      &:active,
      &:focus {
        background-color: map-get($value, disabled-color);
        background-image: none;
      }
      &:hover {
        cursor: not-allowed;
        // box-shadow: none;
      }
    }
  }
}

.neo-btn-secondary {
  @extend %button;
  // background-color: $button-secondary-background-color;
  border-width: $button-secondary-border-width;
  border-style: $button-secondary-border-style;
  @each $name, $value in $button-states {
    &--#{$name} {
      //
      background-color: $button-tertiary-hover-background-color;
      background-image: linear-gradient(
        50deg,
        $button-tertiary-hover-background-color 0%,
        $button-tertiary-hover-background-color 50%,
        $button-secondary-background-color 50%,
        $button-secondary-background-color 100%
      );
      background-repeat: no-repeat;
      background-size: 300%;
      background-position: 100% 0%;
      transition: background-position
        $global-transition-duration
        $global-transition-timing;
      transition-delay: 0s, 0.15s;
      //
      border-color: map-get($value, color);
      color: map-get($value, color);
      @include pulse("button", $name, map-get($value, color-rgb));
    }
    &--#{$name}:hover,
    &--#{$name}:focus {
      transition-property: background-position, border-color, color;
      transition-timing-function: $global-transition-timing;
      transition-duration: $global-transition-duration;
      transition-delay: 0s, 0.15s;
      border-color: map-get($value, hover-color);
      color: map-get($value, hover-color);
      // box-shadow: $button-box-shadow;
      //
      cursor: pointer;
      background-position: 0% 100%;
      //
    }
    &--#{$name}:active {
      transition-property: background-color, border-color, color;
      transition-timing-function: $global-transition-timing;
      transition-duration: $global-transition-duration;
      border-color: map-get($value, pressed-color);
      color: map-get($value, pressed-color);
      // box-shadow: $button-box-shadow;
      background-color: $button-tertiary-hover-background-color;
      background-image: none;
    }
    &--#{$name}:focus {
      // outline: $global-outline-color auto 2px;
    }
    &--#{$name}[disabled],
    &--#{$name}--disabled {
      border-color: map-get($value, disabled-color);
      color: map-get($value, disabled-color);
      background-color: $button-secondary-background-color;
      background-image: none;
      &:active,
      &:focus {
        border-color: map-get($value, disabled-color);
        color: map-get($value, disabled-color);
        background-color: $button-secondary-background-color;
        background-image: none;
      }
      &:hover {
        border-color: map-get($value, disabled-color);
        color: map-get($value, disabled-color);
        background-color: $button-secondary-background-color;
        background-image: none;
        cursor: not-allowed;
        // box-shadow: none;
      }
    }
  }
}

// tertiary class

// .neo-btn-tertiary {
//   @extend %button;
//   background-color: transparent;
//   @each $name, $value in $button-states {
//     &--#{$name} {
//       color: map-get($value, color);
//       @include pulse('button', $name, map-get($value, color));
//     }
//     &--#{$name}:hover,
//     &--#{$name}:active,
//     &--#{$name}:focus {
//       color: map-get($value, hover-color);
//       background-color: $button-tertiary-hover-background-color;
//     }
//     &--#{$name}[disabled] {
//       color: map-get($value, disabled-color);
//       &:hover {
//         cursor: not-allowed;
//         box-shadow: none;
//       }
//     }
//   }
// }

.neo-btn-tertiary {
  @extend %button;
  // background-color: transparent;
  @each $name, $value in $button-states {
    &--#{$name} {
      //
      background-image: linear-gradient(
        50deg,
        $button-tertiary-hover-background-color 0%,
        $button-tertiary-hover-background-color 50%,
        $button-secondary-background-color 50%,
        $button-secondary-background-color 100%
      );
      background-repeat: no-repeat;
      background-size: 300%;
      background-position: 100% 0%;
      transition: background-position
        $global-transition-duration
        $global-transition-timing;
      transition-delay: 0s, 0.15s;
      //
      color: map-get($value, color);
      @include pulse("button", $name, map-get($value, color-rgb));
    }
    &--#{$name}:hover,
    &--#{$name}:focus {
      transition-property: background-position, background-color, color;
      transition-timing-function: $global-transition-timing;
      transition-duration: $global-transition-duration;
      transition-delay: 0s, 0.15s;
      color: map-get($value, hover-color);
      background-color: $button-tertiary-hover-background-color;
      //
      cursor: pointer;
      background-position: 0% 100%;
      //
    }
    &--#{$name}:active {
      color: map-get($value, pressed-color);
      background-color: $button-tertiary-hover-background-color;
      background-image: none;
    }
    &--#{$name}:focus {
      // outline: $global-outline-color auto 2px;
    }
    &--#{$name}[disabled],
    &--#{$name}--disabled {
      background-image: none;
      color: map-get($value, disabled-color);
      // added to fix issue with disabled state
      background-color: transparent;
      &:active,
      &:focus {
        background-image: none;
        color: map-get($value, disabled-color);
        // added to fix issue with disabled state
        background-color: transparent;
      }
      &:hover {
        cursor: not-allowed;
        box-shadow: none;
      }
    }
  }
}

// circle buttons

.neo-btn-circle {
  // NEO-359 fix - centering button in Firefox browser
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 100%;
  height: $button-circular-size;
  width: $button-circular-size;
  &:hover {
    transition: $button-transition;
    transition-property: background-color, color, box-shadow;
  }

  // outline: 0;
  color: $button-text-color;
  cursor: pointer;
  &::before {
    font-size: $button-circle-icon-size;
  }
  &--compact {
    height: $compact-circle-button-size;
    width: $compact-circle-button-size;
    &::before {
      font-size: $compact-circle-button-icon-size;
    }
  }
  &:focus,
  &:focus-visible {
    outline-offset: 0px;
  }

  // primary class

  &-primary {
    // remove extra colored circle from buttons
    border: 0;
    @each $name, $value in $button-states {
      &--#{$name} {
        background-color: map-get($value, hover-color);
        //
        background-image: linear-gradient(
          50deg,
          map-get($value, hover-color) 0%,
          map-get($value, hover-color) 50%,
          map-get($value, color) 50%,
          map-get($value, color) 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        //
        // background-color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        cursor: pointer;
        background-position: 0% 100%;
        //
        // background-color: map-get($value, hover-color);
        // box-shadow: $button-box-shadow;
      }
      &--#{$name}:active {
        transition: $global-hover-transition;
        background-color: map-get($value, pressed-color);
        // box-shadow: $button-box-shadow;
        background-image: none;
        // background-size: 0%;
      }
      &--#{$name}:focus {
        // outline: $global-outline-color auto 2px;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        background-color: map-get($value, disabled-color);
        &:active,
        &:focus {
          background-image: none;
          background-color: map-get($value, disabled-color);
        }
        &:hover {
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }

  // secondary class

  &-secondary {
    outline-offset: 1px !important;
    border-width: $button-secondary-border-width;
    border-style: $button-secondary-border-style;
    // background-color: $button-secondary-background-color;
    @each $name, $value in $button-states {
      &--#{$name} {
        //
        background-image: linear-gradient(
          50deg,
          $button-tertiary-hover-background-color 0%,
          $button-tertiary-hover-background-color 50%,
          $button-secondary-background-color 50%,
          $button-secondary-background-color 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        //
        border-color: map-get($value, color);
        color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        cursor: pointer;
        background-position: 0% 100%;
        //
        border-color: map-get($value, hover-color);
        color: map-get($value, hover-color);
        // box-shadow: $button-box-shadow;
      }
      &--#{$name}:active {
        border-color: map-get($value, pressed-color);
        color: map-get($value, pressed-color);
        // box-shadow: $button-box-shadow;
        background-image: none;
        background-color: $button-tertiary-hover-background-color;
        background-image: none;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        border-color: map-get($value, disabled-color);
        color: map-get($value, disabled-color);
        &:active,
        &:focus {
          background-image: none;
          border-color: map-get($value, disabled-color);
          color: map-get($value, disabled-color);
        }
        &:hover {
          background-image: none;
          border-color: map-get($value, disabled-color);
          color: map-get($value, disabled-color);
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }

  // tertiary class

  &-tertiary {
    border: 0;
    @media not all and (min-resolution: 0.001dpcm) {
      @supports (-webkit-appearance: none) {
        border: initial;
        border-style: outset;
        border-width: 1px;
        border-color: transparent;
      }
    }
    // background-color: transparent;
    @each $name, $value in $button-states {
      &--#{$name} {
        //
        background-image: linear-gradient(
          50deg,
          $button-tertiary-hover-background-color 0%,
          $button-tertiary-hover-background-color 50%,
          $button-secondary-background-color 50%,
          $button-secondary-background-color 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        @media not all and (min-resolution: 0.001dpcm) {
          @supports (-webkit-appearance: none) {
            background-position: 96% 5%;
          }
        }
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        //
        color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        cursor: pointer;
        background-position: 0% 100%;
        @media not all and (min-resolution: 0.001dpcm) {
          @supports (-webkit-appearance: none) {
            background-position: 5% 96%;
          }
        }
        //
        color: map-get($value, hover-color);
        // background-color: $button-tertiary-hover-background-color;
      }
      &--#{$name}:active {
        background-image: none;
        color: map-get($value, pressed-color);
        background-color: $button-tertiary-hover-background-color;
      }
      &--#{$name}:focus {
        // outline: $global-outline-color auto 2px;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        color: map-get($value, disabled-color);
        background-color: transparent;
        &:active,
        &:focus {
          background-image: none;
          color: map-get($value, disabled-color);
          background-color: transparent;
        }
        &:hover {
          background-image: none;
          color: map-get($value, disabled-color);
          background-color: transparent;
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }
}

// square buttons

.neo-btn-square {
  // NEO-359 fix - centering button in Firefox browser
  display: flex;
  align-items: center;
  justify-content: center;
  height: $button-square-size;
  width: $button-square-size;
  transition: $button-transition;
  transition-property: background-color, color, box-shadow;
  border-radius: $button-border-radius;
  // outline: 0;
  color: $button-text-color;
  // cursor: pointer;
  &::before {
    font-size: $button-square-icon-size;
  }
  &:focus,
  &:focus-visible {
    outline-offset: 0px;
  }

  &--compact {
    height: $compact-square-button-size;
    width: $compact-square-button-size;
    &::before {
      font-size: $compact-square-button-icon-size;
    }
  }

  // primary class

  &-primary {
    // remove extra colored circle from buttons
    border: 0;
    @each $name, $value in $button-states {
      &--#{$name} {
        //
        background-image: linear-gradient(
          50deg,
          map-get($value, hover-color) 0%,
          map-get($value, hover-color) 50%,
          map-get($value, color) 50%,
          map-get($value, color) 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        //
        // background-color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        transition-delay: 0s, 0.15s;
        cursor: pointer;
        background-position: 0% 100%;
        //
        // background-color: map-get($value, hover-color);
        // box-shadow: $button-box-shadow;
      }
      &--#{$name}:active {
        transition: $global-hover-transition;
        background-color: map-get($value, pressed-color);
        // box-shadow: $button-box-shadow;
        background-image: none;
        // background-size: 0%;
      }
      &--#{$name}:focus {
        // outline: $global-outline-color auto 2px;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        background-color: map-get($value, disabled-color);
        &:active,
        &:focus {
          background-image: none;
          background-color: map-get($value, disabled-color);
        }
        &:hover {
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }
  // secondary class

  &-secondary {
    outline-offset: 1px !important;
    border-width: $button-secondary-border-width;
    border-style: $button-secondary-border-style;
    // background-color: $button-secondary-background-color;
    @each $name, $value in $button-states {
      &--#{$name} {
        //
        background-image: linear-gradient(
          50deg,
          $button-tertiary-hover-background-color 0%,
          $button-tertiary-hover-background-color 50%,
          $button-secondary-background-color 50%,
          $button-secondary-background-color 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        // transition-delay: 0s, 0.15s;
        //
        border-color: map-get($value, color);
        color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        cursor: pointer;
        background-position: 0% 100%;
        //
        border-color: map-get($value, hover-color);
        color: map-get($value, hover-color);
        // box-shadow: $button-box-shadow;
      }
      &--#{$name}:active {
        background-image: none;
        border-color: map-get($value, pressed-color);
        color: map-get($value, pressed-color);
        // box-shadow: $button-box-shadow;
        background-color: $button-tertiary-hover-background-color;
        background-image: none;
      }
      &--#{$name}:focus {
        // outline: $global-outline-color auto 2px;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        border-color: map-get($value, disabled-color);
        color: map-get($value, disabled-color);
        &:active,
        &:focus {
          background-image: none;
          border-color: map-get($value, disabled-color);
          color: map-get($value, disabled-color);
        }
        &:hover {
          background-image: none;
          border-color: map-get($value, disabled-color);
          color: map-get($value, disabled-color);
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }

  // tertiary class

  &-tertiary {
    // background-color: transparent;
    border: 0;
    @each $name, $value in $button-states {
      &--#{$name} {
        //
        background-image: linear-gradient(
          50deg,
          $button-tertiary-hover-background-color 0%,
          $button-tertiary-hover-background-color 50%,
          $button-secondary-background-color 50%,
          $button-secondary-background-color 100%
        );
        background-repeat: no-repeat;
        background-size: 300%;
        background-position: 100% 0%;
        transition: background-position
          $global-transition-duration
          $global-transition-timing;
        // transition-delay: 0s, 0.15s;
        //
        color: map-get($value, color);
        @include pulse("button", $name, map-get($value, color-rgb));
      }
      &--#{$name}:hover,
      &--#{$name}:focus {
        //
        cursor: pointer;
        background-position: 0% 100%;
        //
        color: map-get($value, hover-color);
        // background-color: $button-tertiary-hover-background-color;
      }
      &--#{$name}:active {
        color: map-get($value, pressed-color);
        background-color: $button-tertiary-hover-background-color;
        background-image: none;
      }
      &--#{$name}:focus {
        // outline: $global-outline-color auto 2px;
      }
      &--#{$name}[disabled],
      &--#{$name}--disabled {
        background-image: none;
        color: map-get($value, disabled-color);
        background-color: transparent;
        &:active,
        &:focus {
          background-image: none;
          color: map-get($value, disabled-color);
          background-color: transparent;
        }
        &:hover {
          background-image: none;
          color: map-get($value, disabled-color);
          background-color: transparent;
          cursor: not-allowed;
          // box-shadow: none;
        }
      }
    }
  }
}

// custom text color for dark mode

.neo-dark .neo-btn-primary--event {
  color: $token-color-base-900;
}
